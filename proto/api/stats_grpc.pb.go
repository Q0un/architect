// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: api/stats.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StatsService_HealthCheck_FullMethodName = "/api.StatsService/HealthCheck"
	StatsService_TicketStats_FullMethodName = "/api.StatsService/TicketStats"
	StatsService_TopTickets_FullMethodName  = "/api.StatsService/TopTickets"
	StatsService_TopUsers_FullMethodName    = "/api.StatsService/TopUsers"
)

// StatsServiceClient is the client API for StatsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatsServiceClient interface {
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	TicketStats(ctx context.Context, in *TicketStatsRequest, opts ...grpc.CallOption) (*TicketStatsResponse, error)
	TopTickets(ctx context.Context, in *TopTicketsRequest, opts ...grpc.CallOption) (*TopTicketsResponse, error)
	TopUsers(ctx context.Context, in *TopUsersRequest, opts ...grpc.CallOption) (*TopUsersResponse, error)
}

type statsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStatsServiceClient(cc grpc.ClientConnInterface) StatsServiceClient {
	return &statsServiceClient{cc}
}

func (c *statsServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, StatsService_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsServiceClient) TicketStats(ctx context.Context, in *TicketStatsRequest, opts ...grpc.CallOption) (*TicketStatsResponse, error) {
	out := new(TicketStatsResponse)
	err := c.cc.Invoke(ctx, StatsService_TicketStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsServiceClient) TopTickets(ctx context.Context, in *TopTicketsRequest, opts ...grpc.CallOption) (*TopTicketsResponse, error) {
	out := new(TopTicketsResponse)
	err := c.cc.Invoke(ctx, StatsService_TopTickets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsServiceClient) TopUsers(ctx context.Context, in *TopUsersRequest, opts ...grpc.CallOption) (*TopUsersResponse, error) {
	out := new(TopUsersResponse)
	err := c.cc.Invoke(ctx, StatsService_TopUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatsServiceServer is the server API for StatsService service.
// All implementations must embed UnimplementedStatsServiceServer
// for forward compatibility
type StatsServiceServer interface {
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	TicketStats(context.Context, *TicketStatsRequest) (*TicketStatsResponse, error)
	TopTickets(context.Context, *TopTicketsRequest) (*TopTicketsResponse, error)
	TopUsers(context.Context, *TopUsersRequest) (*TopUsersResponse, error)
	mustEmbedUnimplementedStatsServiceServer()
}

// UnimplementedStatsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStatsServiceServer struct {
}

func (UnimplementedStatsServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedStatsServiceServer) TicketStats(context.Context, *TicketStatsRequest) (*TicketStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TicketStats not implemented")
}
func (UnimplementedStatsServiceServer) TopTickets(context.Context, *TopTicketsRequest) (*TopTicketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopTickets not implemented")
}
func (UnimplementedStatsServiceServer) TopUsers(context.Context, *TopUsersRequest) (*TopUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopUsers not implemented")
}
func (UnimplementedStatsServiceServer) mustEmbedUnimplementedStatsServiceServer() {}

// UnsafeStatsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatsServiceServer will
// result in compilation errors.
type UnsafeStatsServiceServer interface {
	mustEmbedUnimplementedStatsServiceServer()
}

func RegisterStatsServiceServer(s grpc.ServiceRegistrar, srv StatsServiceServer) {
	s.RegisterService(&StatsService_ServiceDesc, srv)
}

func _StatsService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatsService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatsService_TicketStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServiceServer).TicketStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatsService_TicketStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServiceServer).TicketStats(ctx, req.(*TicketStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatsService_TopTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopTicketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServiceServer).TopTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatsService_TopTickets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServiceServer).TopTickets(ctx, req.(*TopTicketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatsService_TopUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServiceServer).TopUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatsService_TopUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServiceServer).TopUsers(ctx, req.(*TopUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StatsService_ServiceDesc is the grpc.ServiceDesc for StatsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StatsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.StatsService",
	HandlerType: (*StatsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _StatsService_HealthCheck_Handler,
		},
		{
			MethodName: "TicketStats",
			Handler:    _StatsService_TicketStats_Handler,
		},
		{
			MethodName: "TopTickets",
			Handler:    _StatsService_TopTickets_Handler,
		},
		{
			MethodName: "TopUsers",
			Handler:    _StatsService_TopUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/stats.proto",
}
